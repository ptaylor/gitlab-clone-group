#!/usr/bin/env python3

import gitlab
import subprocess
import argparse
import os
import sys
import requests


parser = argparse.ArgumentParser(description="""
Clone all respositories in a gitlab group.
""")
parser.add_argument(
        'group', 
	nargs=1, 
	help='The gitlab group')
parser.add_argument(
        '--token', '-t', 
	nargs=1, 
	action='store', 
	dest='token', 
	help='Your gitlab API token')
parser.add_argument(
        '--url', '-u', 
	nargs=1, 
	action='store', 
	dest='url', 
	default='http://git4lab8.labs.mastercard.com/gitlab8', 
	help= 'The gitlab API endpoint')
parser.add_argument(
        '--dry-run', '-d', 
	action='store_true', 
	dest='dryrun', 
	default=False,
	help= 'Dry run, just print the repositories to clone')

args = parser.parse_args()

group_path = args.group[0]
dry_run = args.dryrun

def get_env(n):
  if n in os.environ:
    return os.environ[n]

def split_group(group):
  i = group.find('/')
  if i == -1:
    return (group, None)
  else:
    return (group[0:i], group[i + 1:])

def gitlab_init(url, token):
  return gitlab.Gitlab(url, token)


def filter_subgroup(project, group_path):
    full_path = project.namespace['full_path']
    return full_path.startswith(group_path)


def remove_group_path(path, group_path):
    return path[len(group_path) + 1:]

def clone_project(project, group_path, dry_run):
    http_url = project.http_url_to_repo
    name = project.name
    path = project.path
    description = project.description
    namespace = project.namespace
    full_path = namespace['full_path']

    subdir = remove_group_path(full_path, group_path)
    if subdir == "":
        subdir = "."
    else:
        subdir = f"./{subdir}"
    clone_dir = f"{subdir}/{path}"

    print(f"cloning {http_url} to {clone_dir}")
    if not dry_run:
      subprocess.run(["git","clone", http_url, clone_dir])

def clone_group(gitlab, group_path, dry_run):

    (group, subgroup) = split_group(group_path)

    gitlab_group = gitlab.groups.get(group)

    current_page=1
    page_size=10
    done=False
    total_projects = 0
    while not done:

      projects = gitlab_group.projects.list(page=current_page, per_page = page_size, include_subgroups = True)

      num_projects = len(projects)
      current_page = current_page + 1
      done = num_projects == 0

      for project in projects:
        if (filter_subgroup(project, group_path)):
          clone_project(project, group_path, dry_run)
          total_projects = total_projects + 1

    print(f"total projects: {total_projects}")


token = args.token
if token is None:
  token = get_env('GITLAB_TOKEN')

url = args.url


try:
  gitlab = gitlab_init(url, token)
  clone_group(gitlab, group_path, dry_run)

except requests.exceptions.ConnectionError as e:
  print(f"Error connecting to gitlab {url}")
  sys.exit(1)
except gitlab.exceptions.GitlabGetError as e:
  # TODO exception not working
  print(f"Unable to clone group {group_id}");
  sys.exit(1);





